plugins {
    id 'java'
    id 'application'
    id "org.springframework.boot" version "3.0.4"
    id "io.spring.dependency-management" version "1.1.0"
    id 'org.openapi.generator' version '7.9.0'
}

group = 'org.multiple.datasource'
version = '1.0-SNAPSHOT'

springBoot{
    mainClass = 'org.multiple.datasource.Main'
}

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

dependencies {
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.25'
    implementation "org.openapitools:jackson-databind-nullable:0.2.2"
    implementation "javax.validation:validation-api:2.0.1.Final"

    implementation "org.postgresql:postgresql:42.5.4"
    implementation 'org.springframework.boot:spring-boot-starter-web:3.0.4'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation project(':processors')
    implementation 'com.google.auto.service:auto-service-annotations:1.0-rc5'
    annotationProcessor project(':processors')

    testImplementation "org.testcontainers:testcontainers:1.20.3"
    implementation platform('org.testcontainers:testcontainers-bom:1.20.3') //import bom
    testImplementation('org.testcontainers:postgresql') //no version specified
}

tasks.withType(JavaCompile) {
    doFirst {
        options.annotationProcessorPath = configurations.annotationProcessor
        println "AnnotationProcessorPath for $name is"
        println options.getAnnotationProcessorPath().getFiles()


        options.getAnnotationProcessorPath().getFiles().forEach {
            (name) -> {
                println name;
            }
        }

    }
}
test {
    useJUnitPlatform()
}

sourceSets.main.java.srcDir "${rootDir}/service/build/generate-resources//main/src/main/java"


openApiGenerate {
    ignoreFileOverride.set("${rootDir}/service/.openapi-generator-java-sources.ignore")
    inputSpec.set("${rootDir}/service/src/main/resources/user-api.yaml")
    generatorName = 'spring'
    configOptions.set([
            useSpringBoot3: "true",
            library: 'spring-boot',
            openApiNullable: 'false',
            interfaceOnly: "true"
    ])
}

tasks.named('compileJava') {
    dependsOn(tasks.openApiGenerate)
}
